备份2018年5月27日 15:55分

备份2018年6月10日 20:53分
内容：
1：使用AVX（256bit）指令集加速 编译选项 g++ -o2 -mavx -c -std=c++11 BCHCode_XOR.cpp -o BCHCode_XOR.o
2：关于内存对齐的，使用AVX(_mm256_xor_ps, _mm256_store_ps)需要手动进行内存对齐，需要调用#define _aligned_malloc(a, b) memalign(b, a)
  关于memalign参考https://blog.csdn.net/shisiye15/article/details/7827716
    void * memalign (size_t boundary, size_t size) 
    函数memalign将分配一个由size指定大小，地址是boundary的倍数的内存块。
    参数boundary必须是2的幂！
    函数memalign可以分配较大的内存块，并且可以为返回的地址指定粒度。
3：运行的时候如果报段错误，（估计就是因为内存没对齐，没办法支持AVX），即 
    https://stackoverflow.com/questions/33373318/avx-segmentation-fault-on-linux
    
    It is probably an data alignment issue. 
    _mm256_load_ps requires 256-bit (32-bytes) aligned memory.
    The default allocator for std::vector doesn't meet that requirement. 
    You'll need to supply an aligned allocator or 
    use another instruction with less stringent alignment requirement (such as _mm256_loadu_ps).
4：内存对齐的时候，要使用C语言的malloc函数进行申请内存空间，
    普通申请：
    char *res = new char[UnitSize * ParityLen];
    char ** buffer = new char*[StripeNum + 1];
    for (int i = 0; i < StripeNum + 1; i++) {					//进行初始化的一些操作
		  buffer[i] = new char[CodeLen * UnitSize];
		  memset(buffer[i], 0, sizeof(char) * CodeLen * UnitSize);
	  }
    内存对齐申请：
    char *res = (char *)_aligned_malloc(UnitSize * ParityLen, 32);
    char **buffer = (char **)malloc((StripeNum + 1) * sizeof(char *));
    for(int i = 0; i < StripeNum + 1; i++){
		  buffer[i] = (char *)_aligned_malloc(CodeLen * UnitSize, 32);	
		  memset(buffer[i], 0, sizeof(char) * CodeLen * UnitSize);
	  }
